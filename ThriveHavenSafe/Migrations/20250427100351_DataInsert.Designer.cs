// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThriveHavenSafe.Data;

#nullable disable

namespace ThriveHavenSafe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250427100351_DataInsert")]
    partial class DataInsert
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.AccountStuff.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("NameOnCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.AccountStuff.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.CartStuff.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.CartStuff.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.ConcessionStuff.Concession", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemID"), 1L, 1);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.ToTable("Concessions");

                    b.HasData(
                        new
                        {
                            ItemID = 1,
                            Cost = 4.0,
                            ImageUrl = "/Images/Concessions/Popcorn.jpg",
                            ItemName = "Popcorn"
                        },
                        new
                        {
                            ItemID = 2,
                            Cost = 5.0,
                            ImageUrl = "/Images/Concessions/drink.jpg",
                            ItemName = "Fountain Drink"
                        },
                        new
                        {
                            ItemID = 3,
                            Cost = 5.0,
                            ImageUrl = "/Images/Concessions/hotdog.jpg",
                            ItemName = "Hotdog"
                        });
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.ConcessionStuff.ConcessionOrder", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<int?>("CartID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserOrderId")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CartID");

                    b.HasIndex("ItemID");

                    b.HasIndex("UserOrderId");

                    b.ToTable("ConcessionOrders");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.MovieStuff.Movie", b =>
                {
                    b.Property<int>("MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieID"), 1L, 1);

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeFrame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieID");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieID = 1,
                            Genre = "Musical/Romance",
                            ImageUrl = "/Images/MovieList/La La Land.jpg",
                            Name = "La La Land",
                            Rating = "PG-13",
                            TimeFrame = "2h 8m",
                            Year = "2016"
                        },
                        new
                        {
                            MovieID = 2,
                            Genre = "Action",
                            ImageUrl = "/Images/MovieList/Oceans8.png",
                            Name = "Ocean's 8",
                            Rating = "PG-13",
                            TimeFrame = "1hr 51m",
                            Year = "2018"
                        },
                        new
                        {
                            MovieID = 3,
                            Genre = "Romance/Drama",
                            ImageUrl = "/Images/MovieList/she's all that.jpg",
                            Name = "She's all that",
                            Rating = "PG-13",
                            TimeFrame = "1h 35m",
                            Year = "1999"
                        },
                        new
                        {
                            MovieID = 4,
                            Genre = "Sci-Fi/Thriller",
                            ImageUrl = "/Images/MovieList/Arrival.jpg",
                            Name = "Arrival",
                            Rating = "PG-13",
                            TimeFrame = "1h 56m",
                            Year = "2016"
                        },
                        new
                        {
                            MovieID = 5,
                            Genre = "Action/Thriller",
                            ImageUrl = "/Images/MovieList/Baby driver.jpg",
                            Name = "Baby Driver",
                            Rating = "PG-13",
                            TimeFrame = "1h 55m",
                            Year = "2017"
                        },
                        new
                        {
                            MovieID = 6,
                            Genre = "Action/Sci-Fi",
                            ImageUrl = "/Images/MovieList/Civil war.jpg",
                            Name = "Captain America: Civil War",
                            Rating = "PG-13",
                            TimeFrame = "2h 28m",
                            Year = "2016"
                        },
                        new
                        {
                            MovieID = 7,
                            Genre = "Romance/Drama",
                            ImageUrl = "/Images/MovieList/Crazy Rich Asians.jpg",
                            Name = "Crazy Rich Asians",
                            Rating = "PG-13",
                            TimeFrame = "2h 1m",
                            Year = "2018"
                        },
                        new
                        {
                            MovieID = 8,
                            Genre = "Action",
                            ImageUrl = "/Images/MovieList/Fast and Furious 6.jpg",
                            Name = "Fast and Furious 6",
                            Rating = "PG-13",
                            TimeFrame = "2h 10m",
                            Year = "2013"
                        },
                        new
                        {
                            MovieID = 9,
                            Genre = "Drama/Comedy",
                            ImageUrl = "/Images/MovieList/Grown Ups.jpg",
                            Name = "Grown ups",
                            Rating = "PG-13",
                            TimeFrame = "1h 42m",
                            Year = "2010"
                        },
                        new
                        {
                            MovieID = 10,
                            Genre = "Musical",
                            ImageUrl = "/Images/MovieList/HairSpray.jpg",
                            Name = "Hairspray",
                            Rating = "PG-13",
                            TimeFrame = "1h 57m",
                            Year = "2007"
                        },
                        new
                        {
                            MovieID = 11,
                            Genre = "Musical/Drama",
                            ImageUrl = "/Images/MovieList/Hamilton.jpg",
                            Name = "Hamilton",
                            Rating = "PG-13",
                            TimeFrame = "2h 40m",
                            Year = "2020"
                        },
                        new
                        {
                            MovieID = 12,
                            Genre = "Action",
                            ImageUrl = "/Images/MovieList/Hunger Games.jpg",
                            Name = "Hunger Games",
                            Rating = "PG-13",
                            TimeFrame = "2h 56m",
                            Year = "2012"
                        },
                        new
                        {
                            MovieID = 13,
                            Genre = "Drama",
                            ImageUrl = "/Images/MovieList/Mrs.Doubtfire.jpg",
                            Name = "Mrs.Doubtfire",
                            Rating = "PG-13",
                            TimeFrame = "2h 6m",
                            Year = "1993"
                        },
                        new
                        {
                            MovieID = 14,
                            Genre = "Action/Thriller",
                            ImageUrl = "/Images/MovieList/Rush Hour.jpg",
                            Name = "Rush Hour",
                            Rating = "PG-13",
                            TimeFrame = "1h 35m",
                            Year = "1998"
                        },
                        new
                        {
                            MovieID = 15,
                            Genre = "Sci-Fi/Action",
                            ImageUrl = "/Images/MovieList/Star wars.jpg",
                            Name = "Star Wars: The Rise of SkyWalker",
                            Rating = "PG-13",
                            TimeFrame = "2h 22m",
                            Year = "2019"
                        },
                        new
                        {
                            MovieID = 16,
                            Genre = "Romance/Drama",
                            ImageUrl = "/Images/MovieList/The Great Gatsby.jpg",
                            Name = "The Great Gatsby",
                            Rating = "PG-13",
                            TimeFrame = "2h 22m",
                            Year = "2013"
                        },
                        new
                        {
                            MovieID = 17,
                            Genre = "Sci-Fi",
                            ImageUrl = "/Images/MovieList/The Martian.jpg",
                            Name = "The Martian",
                            Rating = "PG-13",
                            TimeFrame = "2h 31m",
                            Year = "2015"
                        },
                        new
                        {
                            MovieID = 18,
                            Genre = "Action",
                            ImageUrl = "/Images/MovieList/Tower Heist.jpg",
                            Name = "Tower Heist",
                            Rating = "PG-13",
                            TimeFrame = "1h 44m",
                            Year = "2011"
                        },
                        new
                        {
                            MovieID = 19,
                            Genre = "Musical/Romance",
                            ImageUrl = "/Images/MovieList/West Side Story.jpg",
                            Name = "West side Story",
                            Rating = "PG-13",
                            TimeFrame = "2h 36m",
                            Year = "2021"
                        });
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.MovieStuff.Showing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<string>("ShowingDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowingTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Showings");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.MovieStuff.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CartId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<string>("ticketDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ticketTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("MovieId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.AccountStuff.Payment", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.CartStuff.Cart", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.CartStuff.Order", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.AccountStuff.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.ConcessionStuff.ConcessionOrder", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.CartStuff.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveHavenSafe.Models.ConcessionStuff.Concession", "Concession")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveHavenSafe.Models.CartStuff.Order", "Order")
                        .WithMany()
                        .HasForeignKey("UserOrderId");

                    b.Navigation("Cart");

                    b.Navigation("Concession");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ThriveHavenSafe.Models.MovieStuff.Ticket", b =>
                {
                    b.HasOne("ThriveHavenSafe.Models.CartStuff.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveHavenSafe.Models.CartStuff.Order", "Order")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThriveHavenSafe.Models.MovieStuff.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Movie");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
